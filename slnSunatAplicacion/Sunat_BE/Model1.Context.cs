//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sunat_BE
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BD_Sunat1Entities : DbContext
    {
        public BD_Sunat1Entities()
            : base("name=BD_Sunat1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Empresa> Empresa { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual ObjectResult<ObtenerEmpresa_Result> ObtenerEmpresa(string idEmpresa, string key)
        {
            var idEmpresaParameter = idEmpresa != null ?
                new ObjectParameter("idEmpresa", idEmpresa) :
                new ObjectParameter("idEmpresa", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerEmpresa_Result>("ObtenerEmpresa", idEmpresaParameter, keyParameter);
        }
    
        public virtual ObjectResult<ObtenerEmpresaTodas_Result> ObtenerEmpresaTodas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerEmpresaTodas_Result>("ObtenerEmpresaTodas");
        }
    
        public virtual ObjectResult<Nullable<int>> ValidarUsuario(string username, string pass)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ValidarUsuario", usernameParameter, passParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Login(string username, string pass)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("Pass", pass) :
                new ObjectParameter("Pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Login", usernameParameter, passParameter);
        }
    
        public virtual int AgregarEmpresa(string idEmpresa, string nombre, string llave, Nullable<int> estado)
        {
            var idEmpresaParameter = idEmpresa != null ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var llaveParameter = llave != null ?
                new ObjectParameter("Llave", llave) :
                new ObjectParameter("Llave", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarEmpresa", idEmpresaParameter, nombreParameter, llaveParameter, estadoParameter);
        }
    
        public virtual int BorrarEmpresa(string idempresa)
        {
            var idempresaParameter = idempresa != null ?
                new ObjectParameter("Idempresa", idempresa) :
                new ObjectParameter("Idempresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BorrarEmpresa", idempresaParameter);
        }
    
        public virtual int ModificarEmpresa(string idempresa, string nombre, string llave, Nullable<int> estado)
        {
            var idempresaParameter = idempresa != null ?
                new ObjectParameter("Idempresa", idempresa) :
                new ObjectParameter("Idempresa", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var llaveParameter = llave != null ?
                new ObjectParameter("Llave", llave) :
                new ObjectParameter("Llave", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModificarEmpresa", idempresaParameter, nombreParameter, llaveParameter, estadoParameter);
        }
    }
}
